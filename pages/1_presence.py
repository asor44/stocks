import streamlit as st
import database
from models import User
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration de la page
st.set_page_config(
    page_title="Gestion des pr√©sences - Cadets de la d√©fense de Nantes",
    page_icon="üìã",
    layout="wide"
)

def check_authentication():
    """V√©rifie si l'utilisateur est authentifi√©"""
    if 'user' not in st.session_state or not st.session_state.user:
        st.warning("Vous devez √™tre connect√© pour acc√©der √† cette page.")
        st.stop()
    return True

def main():
    try:
        # V√©rifier l'authentification
        check_authentication()
        
        # Titre de la page
        st.title("üìã Gestion des pr√©sences")
        
        # Interface pour scanner les QR codes ou saisir manuellement
        st.markdown("## Scanner un QR Code de pr√©sence")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### Scanner via la cam√©ra")
            st.info("Cette fonctionnalit√© n√©cessite l'acc√®s √† votre cam√©ra pour scanner les QR codes.")
            if st.button("Activer la cam√©ra", key="activate_camera"):
                st.markdown("üé• Cam√©ra activ√©e, veuillez scanner un QR code.")
                # Ici, il faudrait impl√©menter la logique de scan de QR code avec OpenCV et pyzbar
                st.error("Fonctionnalit√© de scan en cours de d√©veloppement.")
        
        with col2:
            st.markdown("### Saisie manuelle du code")
            with st.form("manual_code_form"):
                qr_code = st.text_input("Code QR", placeholder="Entrez le code QR manuellement")
                submit = st.form_submit_button("Valider")
                
                if submit and qr_code:
                    # Logique de traitement du code QR
                    st.success(f"Code '{qr_code}' valid√© avec succ√®s!")
        
        # Historique des pr√©sences
        st.markdown("## Historique des pr√©sences")
        
        # Filtres
        col1, col2, col3 = st.columns(3)
        with col1:
            date_filter = st.date_input("Date")
        with col2:
            # Exemple de filtre par activit√© (√† remplacer par les vraies activit√©s)
            activity_filter = st.selectbox(
                "Activit√©", 
                ["Toutes les activit√©s", "Formation militaire", "Sport", "Activit√© culturelle"]
            )
        with col3:
            # Exemple de filtre par statut (√† remplacer par les vrais statuts)
            status_filter = st.selectbox(
                "Statut", 
                ["Tous les statuts", "Pr√©sent", "Absent", "Retard"]
            )
            
        # Tableau d'exemple (√† remplacer par les donn√©es r√©elles)
        st.markdown("### Liste des participants")
        
        # Exemple de donn√©es (√† remplacer par les vraies donn√©es de la DB)
        example_data = [
            {"name": "Jean Dupont", "status": "Pr√©sent", "check_in": "09:15", "check_out": "17:30"},
            {"name": "Marie Martin", "status": "Absent", "check_in": "-", "check_out": "-"},
            {"name": "Pierre Durand", "status": "Retard", "check_in": "10:45", "check_out": "17:30"},
            {"name": "Sophie Petit", "status": "Pr√©sent", "check_in": "09:00", "check_out": "17:25"}
        ]
        
        # Affichage du tableau
        if example_data:
            st.table(example_data)
        else:
            st.info("Aucune donn√©e de pr√©sence disponible pour les filtres s√©lectionn√©s.")
            
    except Exception as e:
        logger.error(f"Error in presence page: {e}")
        st.error("Une erreur est survenue lors du chargement de la page de pr√©sence")

if __name__ == "__main__":
    main()